# LOAD-CODE Begin,,DS:
LOADI IN2 a,,IN2:
# l2,,IN1:
# INSTRUCTION-LOOP Begin,,ACC:
LOADI IN2 4
LOADI IN1 0
# l1
MULTI IN1 00000000 00000001 00000000
# POLLING-LOOP Begin
LOADI DS 01000000 00000000 00000000
MULTI DS 00000000 00000001 00000000
LOAD ACC 2
# while (empfangsregister_befuehlt == 0) { }
ANDI ACC 00000000 00000000 00000010
JUMP= -2
# new_instruction[7:0] = R1;
LOAD ACC 1
OR IN1 ACC
# R2[1] = 0;
LOAD ACC 2
ANDI ACC 11111101 11111111 11111101
STORE ACC 2
# POLLING-LOOP End
SUBI IN2 1
MOV IN2 ACC
JUMP> -{Lines between this jump and comment l1}
# INSTRUCTION-LOOP End
LOADI DS 10000000 00000000 00000000
MULTI DS 00000000 00000001 00000000
# SRAM[free_address] = new_instruction (M(<a>) := IN1)
STOREIN IN2 IN1 0
# free_address++ (a + 1)
ADDI IN2 1 
# while (new_instruction != final_command) { /*...*/ }
LOADI ACC 01110000 00000000 00000000
MULTI ACC 00000000 00000001 00000000
OPLUSI ACC IN1
JUMP<> -{Lines between this jump and comment l2}
# LOAD-CODE End
